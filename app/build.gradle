apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId "com.mango.know"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.point_focused.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true  // 启用位图
        multiDexEnabled true

        buildConfigField "String", "WECHAT_APP_ID", "\"wx87bfd7a130edc55d\""    //微信支付appid
//        buildConfigField "String", "SERVERHEAD", "\"http://dev.kdb.gdzuanqian.net/\""   //测试服
        buildConfigField "String", "SERVERHEAD", "\"http://tft.tft591.com/\""   //正式服
//        ndk {
//            // 设置支持的SO库架构
//            abiFilters 'armeabi','x86' //, , 'armeabi-v7a', 'x86_64', 'arm64-v8a'
//        }

    }


        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }


    signingConfigs {
        debug {
            storeFile file("keystore/kdb.jks")
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
        }
        release {
            storeFile file("keystore/kdb.jks")
            storePassword "123456"
            keyAlias "key0"
            keyPassword "123456"
        }
    }

    buildTypes {
        release {
            minifyEnabled false  // 启用混淆
            shrinkResources false // 自动清理无用资源
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled true
            shrinkResources true // 自动清理无用资源
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }




}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'com.android.support:support-annotations:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    configurations {
        all*.exclude group: 'com.android.support', module: 'support-v13'
    }
    testImplementation rootProject.ext.testDeps["junit"]
    androidTestImplementation rootProject.ext.testDeps["runner"]
    androidTestImplementation rootProject.ext.testDeps["espresso-core"]
    //leakCanary
    debugImplementation rootProject.ext.testDeps["leakcanary-debug"]
    releaseImplementation rootProject.ext.testDeps["leakcanary-release"]
    // Support库
    api rootProject.ext.supportLibs
    // 网络请求库
    implementation rootProject.ext.networkLibs
    // RxJava2
    implementation rootProject.ext.rxJavaLibs
    implementation rootProject.ext.commonLibs
    // APT dependencies(Kotlin内置的注解处理器)
    annotationProcessor rootProject.ext.annotationProcessorLibs
    //GlideOkHttp
    implementation(rootProject.ext.otherDeps["glideOkhttp"]) {
        exclude group: 'glide-parent'
    }
//    debugImplementation rootProject.ext.testDeps["debug-db"]
}


